# Headless service to provide DNS lookup
apiVersion: v1
kind: Service
metadata:
  name: a-neo4j-0
  labels:
    name: a-neo4j-0
spec:
  ports:
    # the port that this service should serve on
  - port: 80
    targetPort: 7474
    name: "browser"
  clusterIP: None
  selector:
    name: a-neo4j-0
---
apiVersion: v1
kind: Service
metadata:
  name: a-neo4j-0-1
  labels:
    name: a-neo4j-0-1
spec:
  ports:
    # the port that this service should serve on
  - port: 7474
    targetPort: 7474
    name: "browser"
  - port: 5000
    targetPort: 5000
    name: "ha"
  clusterIP: None
  selector:
    name: a-neo4j-0
---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     name: a-neo4j-0
#   name: a-neo4j-0
# spec:
#   ports:
#   - port: 80
#     targetPort: 7474
#     name: "http"
#   selector:
#     app: a-neo4j-0
# ---
# kind: StorageClass
# apiVersion: storage.k8s.io/v1beta1
# metadata:
#   name: a-neo4j-0-pd-ssd
# provisioner: kubernetes.io/gce-pd
# parameters:
#   type: pd-ssd
#   zone: asia-east1-a
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: a-neo4j-0
#   annotations:
#     volume.beta.kubernetes.io/storage-class: "a-neo4j-0-pd-ssd"
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 50Gi
# new API name
# ---
apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: a-neo4j-0
spec:
  serviceName: a-neo4j-0
  replicas: 2
  template:
    metadata:
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "install",
                "image": "gcr.io/google_containers/busybox:1.24",
                "command": ["/bin/sh", "-c", "echo \"
                unsupported.dbms.edition=enterprise\n
                dbms.mode=CORE\n
                dbms.connectors.default_advertised_address=$HOSTNAME.neo4j.default.svc.cluster.local\n
                dbms.connectors.default_listen_address=0.0.0.0\n
                dbms.connector.bolt.type=BOLT\n
                dbms.connector.bolt.enabled=true\n
                dbms.connector.bolt.listen_address=0.0.0.0:7687\n
                dbms.connector.http.type=HTTP\n
                dbms.connector.http.enabled=true\n
                dbms.connector.http.listen_address=0.0.0.0:7474\n
                causal_clustering.raft_messages_log_enable=true\n
                causal_clustering.initial_discovery_members=neo4j-0-0.a-neo4j-0.default.svc.cluster.local:5000,a-neo4j-0.neo4j.default.svc.cluster.local:5000\n
                causal_clustering.leader_election_timeout=2s\n
                  \" > /work-dir/neo4j.conf" ],
                "volumeMounts": [
                    {
                        "name": "a-neo4j-0",
                        "mountPath": "/work-dir"
                    }
                ]
            }
        ]'
      labels:
        name: a-neo4j-0
    spec:
      containers:
      - name: a-neo4j-0
        image: "neo4j/neo4j-experimental:3.1.0-M13-beta3-enterprise"
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: discovery
        - containerPort: 6000
          name: tx
        - containerPort: 7000
          name: raft
        - containerPort: 7474
          name: browser
        - containerPort: 7687
          name: bolt
        securityContext:
          privileged: true
        volumeMounts:
        - name: a-neo4j-0
          mountPath: /conf
        # - name: confdir
        #   mountPath: /conf
    #  volumes:
    #  - name: a-neo4j-0
  volumeClaimTemplates:
  - metadata:
      name: a-neo4j-0
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
#   - metadata:
#       name: confdir
#       annotations:
#         volume.alpha.kubernetes.io/storage-class: anything        
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi